@using univesp_pi2.Models
@using univesp_pi2.Helpers

@{
    var userName = Context.Session.GetString("UserName");
    var cartItems = Context.Session.Get<List<CartItemViewModel>>("Cart");
    var cartItemCount = cartItems?.Count ?? 0;
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ML3 Peças Automotivas</title>

    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 28 28'><path fill='white' d='M16.7 8.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z'/></svg>">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    
    @await RenderSectionAsync("Styles", required: false)

    <style>
      
        .popup-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: none; align-items: center; justify-content: center;
            z-index: 1060; backdrop-filter: blur(5px);
        }
        .popup-card {
            background-color: white; padding: 2.5rem; text-align: center;
            border-radius: var(--bs-border-radius);
            width: 90%; max-width: 400px;
        }

       
        #add-to-cart-popup {
            position: fixed; top: 90px; right: 20px; z-index: 1060;
            width: 350px; background-color: white;
            border-radius: var(--bs-border-radius);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border: 1px solid var(--border-color);
            transform: translateX(120%); opacity: 0;
            transition: transform 0.4s ease-in-out, opacity 0.4s ease;
            visibility: hidden;
        }
        #add-to-cart-popup.visible {
            transform: translateX(0); opacity: 1; visibility: visible;
        }
    </style>
</head>
<body>
    <div id="logout-popup" class="popup-overlay">
        <div class="popup-card">
            <h4 class="fw-bold">Confirmar Saída</h4>
            <p class="text-muted">Você tem certeza que deseja sair da sua conta?</p>
            <div class="d-flex justify-content-center gap-2 mt-4">
                <button id="logout-cancel-btn" type="button" class="btn btn-secondary">Cancelar</button>
                <a href="@Url.Action("Logout", "Login")" class="btn btn-danger">Sim, sair</a>
            </div>
        </div>
    </div>

    <div id="login-required-popup" class="popup-overlay">
        <div class="popup-card">
            <h4 class="fw-bold">Login Necessário</h4>
            <p class="text-muted">Você precisa estar logado para acessar o carrinho de compras.</p>
            <div class="d-flex justify-content-center gap-2 mt-4">
                <button id="login-cancel-btn" type="button" class="btn btn-secondary">Fechar</button>
                <a href="@Url.Action("Index", "Login")" class="btn btn-primary">Fazer Login</a>
            </div>
        </div>
    </div>
    
    <div id="add-to-cart-popup">
        <div class="p-3">
            <div class="d-flex align-items-center mb-3">
                <i data-lucide="check-circle" class="text-success me-2"></i>
                <h6 class="fw-bold mb-0">Produto adicionado ao carrinho!</h6>
            </div>
            <div class="d-flex align-items-center border-top pt-3">
                <img id="popup-product-image" src="" class="rounded me-3" style="width: 60px;" alt="Produto">
                <div>
                    <p id="popup-product-name" class="mb-0 small fw-semibold"></p>
                </div>
            </div>
            <div class="d-grid gap-2 mt-3">
                <a href="@Url.Action("Index", "Cart")" class="btn btn-primary">Ver Carrinho</a>
                <button type="button" id="popup-continue-shopping" class="btn btn-outline-secondary btn-sm">Continuar Comprando</button>
            </div>
        </div>
    </div>

    @if (ViewData["Title"]?.ToString() != "Login")
    {
        <header class="bg-dark-blue-primary shadow-sm sticky-top">
            <div class="container py-3 d-flex justify-content-between align-items-center">
                <a href="@Url.Action("Index", "Home")" class="text-decoration-none d-flex align-items-center">
                    <div class="bg-brand-orange p-2 rounded d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                        <i data-lucide="wrench" class="text-white"></i>
                    </div>
                    <div class="ms-3">
                        <h1 class="h5 mb-0 fw-bold text-white">ML3 Peças Automotivas</h1>
                        <p class="small text-white-50 mb-0">Sua oficina online</p>
                    </div>
                </a>
                <div class="d-none d-lg-flex w-50 mx-4">
                    <form action="@Url.Action("Index", "Catalogo")" method="get" class="input-group">
                        <input type="text" name="CurrentSearch" class="form-control" placeholder="Buscar peças por nome, código ou modelo...">
                        <button class="btn btn-primary" type="submit"><i data-lucide="search" class="text-white"></i></button>
                    </form>
                </div>
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(userName))
                    {
                        <a href="@Url.Action("Index", "Account")" class="d-flex align-items-center text-white text-decoration-none me-4">
                            <i data-lucide="user" class="me-2"></i>
                            <span class="fw-semibold d-none d-md-inline">Olá, @userName</span>
                        </a>
                        <button id="logout-btn" type="button" class="btn btn-sm btn-outline-light me-4" title="Sair da conta">
                            <i data-lucide="log-out"></i>
                        </button>
                        <a href="@Url.Action("Index", "Cart")" class="text-white-50 text-decoration-none position-relative">
                            <i data-lucide="shopping-cart"></i>
                            <span id="cart-badge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill cart-badge @(cartItemCount == 0 ? "d-none" : "")">
                                @cartItemCount
                            </span>
                        </a>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Login")" class="d-flex align-items-center text-white-50 text-decoration-none me-4">
                            <i data-lucide="user" class="me-2"></i>
                            <span class="fw-semibold d-none d-md-inline">Entrar</span>
                        </a>
                        <a href="#" id="cart-logged-out" class="text-white-50 text-decoration-none position-relative">
                            <i data-lucide="shopping-cart"></i>
                        </a>
                    }
                </div>
            </div>
            <hr class="text-white-50 my-0" style="opacity: 0.1;" />
            <nav class="navbar navbar-expand-lg navbar-dark bg-dark-blue-primary">
                <div class="container">
                    <div class="collapse navbar-collapse" id="mainNavbar">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item"><a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" ? "active" : "")" href="@Url.Action("Index", "Home")">Home</a></li>
                            <li class="nav-item"><a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Catalogo" ? "active" : "")" href="@Url.Action("Index", "Catalogo")">Catálogo</a></li>
                        </ul>
                        <div class="d-none d-lg-flex align-items-center text-white small">
                            <span class="text-white-50 me-3">Categorias:</span>
                            <a href="@Url.Action("Index", "Catalogo", new { CurrentCategory = "Freios" })" class="d-flex align-items-center nav-link py-0 me-3"><i data-lucide="disc-3" class="me-1" style="width:16px;"></i> Freios</a>
                            <a href="@Url.Action("Index", "Catalogo", new { CurrentCategory = "Motor" })" class="d-flex align-items-center nav-link py-0 me-3"><i data-lucide="settings" class="me-1" style="width:16px;"></i> Motor</a>
                            <a href="@Url.Action("Index", "Catalogo", new { CurrentCategory = "Suspensão" })" class="d-flex align-items-center nav-link py-0 me-3"><i data-lucide="wrench" class="me-1" style="width:16px;"></i> Suspensão</a>
                            <a href="@Url.Action("Index", "Catalogo", new { CurrentCategory = "Elétrica" })" class="d-flex align-items-center nav-link py-0"><i data-lucide="zap" class="me-1" style="width:16px;"></i> Elétrica</a>
                        </div>
                    </div>
                </div>
            </nav>
        </header>
    }
    
    <main role="main">
        @RenderBody()
    </main>

    @if (ViewData["Title"]?.ToString() != "Login")
    {
        <partial name="_Footer" />
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script> lucide.createIcons(); </script>
    
    @await RenderSectionAsync("Scripts", required: false)

    <script>
    document.addEventListener('DOMContentLoaded', function() {
      
        const logoutBtn = document.getElementById('logout-btn');
        const logoutPopup = document.getElementById('logout-popup');
        const logoutCancelBtn = document.getElementById('logout-cancel-btn');
        if(logoutBtn) { logoutBtn.addEventListener('click', () => { logoutPopup.style.display = 'flex'; }); }
        if(logoutCancelBtn) { logoutCancelBtn.addEventListener('click', () => { logoutPopup.style.display = 'none'; }); }

        const cartLoggedOutLink = document.getElementById('cart-logged-out');
        const loginPopup = document.getElementById('login-required-popup');
        const loginCancelBtn = document.getElementById('login-cancel-btn');
        if(cartLoggedOutLink) { cartLoggedOutLink.addEventListener('click', (e) => { e.preventDefault(); loginPopup.style.display = 'flex'; }); }
        if(loginCancelBtn) { loginCancelBtn.addEventListener('click', () => { loginPopup.style.display = 'none'; }); }

       
        document.body.addEventListener('click', function(e) {
            if (e.target.closest('.add-to-cart-btn')) {
                e.preventDefault();
                const card = e.target.closest('.product-card');
                
                const productToAdd = {
                    productId: parseInt(card.dataset.productId),
                    name: card.dataset.productName,
                    unitPrice: parseFloat(card.dataset.productPrice),
                    imageUrl: card.dataset.productImage,
                    brand: card.dataset.productBrand,
                    code: card.dataset.productCode,
                    quantity: 1
                };

                fetch('@Url.Action("AddToCart", "Cart")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(productToAdd)
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        updateCartCount();
                        showAddToCartPopup(productToAdd);
                    } else { alert('Erro ao adicionar o produto.'); }
                }).catch(error => console.error('Erro:', error));
            }
        });

     
        const popup = document.getElementById('add-to-cart-popup');
        const continueBtn = document.getElementById('popup-continue-shopping');
        let popupTimeout;

        function showAddToCartPopup(product) {
            document.getElementById('popup-product-image').src = product.imageUrl;
            document.getElementById('popup-product-name').textContent = product.name;
            
            popup.classList.add('visible');
            lucide.createIcons(); 
            clearTimeout(popupTimeout);
            popupTimeout = setTimeout(() => popup.classList.remove('visible'), 4000); 
        }

        if (continueBtn) {
            continueBtn.addEventListener('click', () => {
                popup.classList.remove('visible');
                clearTimeout(popupTimeout);
            });
        }

      
        function updateCartCount() {
            fetch('@Url.Action("GetCartCount", "Cart")')
                .then(res => res.json())
                .then(data => {
                    const cartBadge = document.getElementById('cart-badge');
                    if (cartBadge) {
                        if (data.count > 0) {
                            cartBadge.textContent = data.count;
                            cartBadge.classList.remove('d-none');
                        } else {
                            cartBadge.classList.add('d-none');
                        }
                    }
                });
        }
    });
    </script>
</body>
</html>