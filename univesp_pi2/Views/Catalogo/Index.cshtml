@model CatalogViewModel
@{
    ViewData["Title"] = "Catálogo de Produtos";
}

@section Styles {
<style>
    .main-content { background-color: #f8f9fa; }
    .filter-section .form-check-input:checked { background-color: var(--dark-blue-primary); border-color: var(--dark-blue-primary); }
    .filter-section .form-check-input { border-radius: 50%; }
    .sort-bar { background-color: #ffffff; padding: 0.75rem 1rem; border: 1px solid var(--border-color); border-radius: var(--bs-border-radius); }
    .sort-bar .form-select { max-width: 180px; }
    .product-card { background-color: #fff; border: 1px solid #dee2e6; transition: box-shadow 0.2s ease-in-out; }
    .product-card:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.08); }
    .product-card .card-img-top { height: 180px; object-fit: cover; }
    .product-card .product-brand { font-size: 0.8rem; color: var(--text-muted); font-weight: 500; }
    .product-card .product-name { font-weight: 600; color: var(--text-dark); font-size: 1rem; }
    .product-card .product-price { font-weight: 700; font-size: 1.25rem; color: var(--text-dark); }
    .product-card .price-installments { font-size: 0.8rem; color: var(--text-muted); }
    .product-card .cart-icon-btn { background-color: var(--brand-orange); color: white; border-radius: 0.375rem; padding: 0.5rem; line-height: 1; border: none; }
    .product-card .cart-icon-btn:hover { background-color: var(--brand-orange-dark); }


    #product-list-container.list-view .product-card { flex-direction: row; align-items: center; }
    #product-list-container.list-view .product-card .card-img-top { width: 180px; height: 180px; object-fit: contain; border-bottom: none; border-right: 1px solid var(--border-color); }
    #product-list-container.list-view .product-card .card-body { flex-grow: 1; }
    #product-list-container.list-view .col { width: 100%; }
</style>
}

<div class="bg-white border-bottom">
    <div class="container py-4">
        <h1 class="h3 fw-bold">Catálogo de Produtos</h1>
        <p class="text-muted mb-0">Encontre as melhores autopeças para seu veículo</p>
        <form asp-action="Index" asp-controller="Catalogo" method="get" class="mt-3">
            <div class="input-group">
                <input type="text" name="CurrentSearch" class="form-control" placeholder="Buscar por nome, código ou marca..." value="@Model.CurrentSearch" form="filter-form">
                <button class="btn btn-dark" type="submit" form="filter-form"><i data-lucide="search" style="width:18px; height:18px;"></i></button>
            </div>
        </form>
    </div>
</div>

<div class="main-content">
    <div class="container py-4">
        <div class="row g-4">
            <aside class="col-lg-3">
                <form asp-action="Index" asp-controller="Catalogo" method="get" id="filter-form">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="mb-0 fw-bold">Filtros</h5>
                        <a href="@Url.Action("Index", "Catalogo")" class="btn btn-link btn-sm text-decoration-none p-0">Limpar</a>
                    </div>

                    <div class="mb-4">
                        <label class="form-label fw-semibold">Categorias</label>
                        @{ var categories = new List<string> { "Freios", "Motor", "Suspensão", "Elétrica", "Fluidos" }; }
                        @foreach (var category in categories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="CurrentCategory" id="cat-@category" value="@category" checked="@(Model.CurrentCategory == category)">
                                <label class="form-check-label" for="cat-@category">@category</label>
                            </div>
                        }
                    </div>

                    <div class="mb-4">
                        <label class="form-label fw-semibold">Marcas</label>
                        @foreach (var brand in Model.AvailableBrands)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="SelectedBrands" value="@brand" id="brand-@brand.Replace(" ", "-")" checked="@(Model.SelectedBrands.Contains(brand))">
                                <label class="form-check-label" for="brand-@brand.Replace(" ", "-")">@brand</label>
                            </div>
                        }
                    </div>

                    <div class="mb-4">
                        <label for="priceRange" class="form-label fw-semibold">Faixa de Preço</label>
                        <input type="range" class="form-range" min="0" max="500" step="10" id="priceRange" name="MaxPrice" value="@Model.MaxPrice">
                        <div class="d-flex justify-content-between text-muted small">
                            <span>R$ 0</span>
                            <span id="price-value-display">R$ @Model.MaxPrice</span>
                        </div>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="InStockOnly" name="InStockOnly" value="true" checked="@Model.InStockOnly">
                        <label class="form-check-label" for="InStockOnly">Apenas em estoque</label>
                    </div>
                    
                    <button type="submit" class="btn btn-dark w-100 mt-4">Aplicar Filtros</button>
                </form>
            </aside>

            <main class="col-lg-9">
                <div class="d-flex justify-content-between align-items-center mb-3 sort-bar">
                    <span class="text-muted small">@Model.Products.Count() produto(s) encontrado(s)</span>
                    <div class="d-flex align-items-center gap-2">
                        <select class="form-select form-select-sm" name="SortBy" form="filter-form" id="sort-by-select">
                            <option value="Name" selected="@(string.IsNullOrEmpty(Model.SortBy) || Model.SortBy == "Name")">Nome A-Z</option>
                            <option value="PriceLow" selected="@(Model.SortBy == "PriceLow")">Preço Menor</option>
                            <option value="PriceHigh" selected="@(Model.SortBy == "PriceHigh")">Preço Maior</option>
                        </select>
                        <div class="btn-group" role="group">
                            <button type="button" id="grid-view-btn" class="btn btn-sm btn-outline-secondary active"><i data-lucide="layout-grid"></i></button>
                            <button type="button" id="list-view-btn" class="btn btn-sm btn-outline-secondary"><i data-lucide="list"></i></button>
                        </div>
                    </div>
                </div>

                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="product-list-container">
                    @if (!Model.Products.Any())
                    {
                        <div class="col-12"><div class="alert alert-warning">Nenhum produto encontrado. Tente ajustar seus filtros.</div></div>
                    }
                    else
                    {
                        @foreach (var product in Model.Products)
                        {
                            <div class="col">
                                <partial name="_ProductCard" model="product" />
                            </div>
                        }
                    }
                </div>
            </main>
        </div>
    </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function () {
    
    const priceSlider = document.getElementById('priceRange');
    const priceDisplay = document.getElementById('price-value-display');
    if (priceSlider && priceDisplay) {
        priceSlider.addEventListener('input', (event) => {
            priceDisplay.textContent = `R$ ${event.target.value}`;
        });
    }
    
   
    const sortSelect = document.getElementById('sort-by-select');
    if (sortSelect) {
        sortSelect.addEventListener('change', function () {
  
            document.getElementById('filter-form').submit();
        });
    }

    const gridBtn = document.getElementById('grid-view-btn');
    const listBtn = document.getElementById('list-view-btn');
    const productContainer = document.getElementById('product-list-container');
    if (gridBtn && listBtn && productContainer) {
        gridBtn.addEventListener('click', function () {
            if (!this.classList.contains('active')) {
                productContainer.classList.remove('list-view');
                listBtn.classList.remove('active');
                this.classList.add('active');
            }
        });
        listBtn.addEventListener('click', function () {
            if (!this.classList.contains('active')) {
                productContainer.classList.add('list-view');
                gridBtn.classList.remove('active');
                this.classList.add('active');
            }
        });
    }
});
</script>
}